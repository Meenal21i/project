pipeline {
    agent any

    options {
        buildDiscarder(logRotator(numToKeepStr: '3', daysToKeepStr: '7'))
    }

    parameters {
        string(name: 'RETRY_COUNT', defaultValue: '1', description: 'Number of test retries on failure')
        string(name: 'TEST_TAG', defaultValue: '@all', description: 'Cucumber tag to run')
    }

    environment {
        PLAYWRIGHT_BROWSERS_PATH = 'C:\\jenkins_cache\\pw_browsers'
        DOTENV_FILE_CRED = 'DOTENV_FILE'
        TEST_DIR = 'week_10_files'
        ALLURE_RESULTS = "${TEST_DIR}\\allure-results"
    }

    stages {
        stage('Checkout') {
            steps {
                echo "Checking out code"
                checkout scm
            }
        }

        stage('Setup Node & Install Dependencies') {
            steps {
                withCredentials([file(credentialsId: env.DOTENV_FILE_CRED, variable: 'DOTENV_FILE_PATH')]) {
                    bat """
                        if not exist "%TEST_DIR%" mkdir "%TEST_DIR%"
                        copy "%DOTENV_FILE_PATH%" "%TEST_DIR%\\.env"
                    """
                }

                bat """
                    cd %TEST_DIR%
                    call npm ci
                    call npx playwright install --with-deps
                """
            }
        }

        stage('Run Playwright Cucumber Tests') {
            steps {
                script {
                    def maxRetries = params.RETRY_COUNT.toInteger()
                    def attempt = 0
                    def success = false

                    while (attempt <= maxRetries && !success) {
                        echo "Running attempt #${attempt + 1}"

                        def status = bat(
                            script: """
                                cd %TEST_DIR%
                                if exist allure-results rmdir /s /q allure-results
                                mkdir allure-results
                                call npx cucumber-js --require-module ts-node/register ^
                                    --require step-definitions/**/*.ts ^
                                    --tags "${params.TEST_TAG}" ^
                                    --format node_modules/allure-cucumberjs ^
                                    --format progress
                            """,
                            returnStatus: true
                        )

                        if (status == 0) {
                            success = true
                        } else {
                            echo "Test failed on attempt ${attempt + 1}"
                            attempt++
                            if (attempt > maxRetries) {
                                error "Tests failed after ${maxRetries + 1} attempt(s)"
                            }
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Publishing Allure Report"
            allure includeProperties: false,
                   jdk: '',
                   results: [[path: "${env.ALLURE_RESULTS}"]]
        }

        success {
            echo "Build succeeded, sending success email"
            withCredentials([string(credentialsId: 'EMAIL_TO', variable: 'EMAIL_TO')]) {
                emailext(
                    subject: "Test Success - ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                    body: """
                        <p>Tests passed successfully.</p>
                        <p><strong>Build URL:</strong> <a href='${env.BUILD_URL}'>${env.BUILD_URL}</a></p>
                        <p><a href="${env.BUILD_URL}allure">View Allure Report</a></p>
                    """,
                    to: EMAIL_TO,
                    mimeType: 'text/html'
                )
            }
        }

        failure {
            echo "Build failed, sending failure email"
            withCredentials([string(credentialsId: 'EMAIL_TO', variable: 'EMAIL_TO')]) {
                emailext(
                    subject: "Test Failure - ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                    body: """
                        <p>Tests failed.</p>
                        <p><strong>Build URL:</strong> <a href='${env.BUILD_URL}'>${env.BUILD_URL}</a></p>
                        <p><a href="${env.BUILD_URL}allure">View Allure Report</a></p>
                    """,
                    to: EMAIL_TO,
                    mimeType: 'text/html'
                )
            }
        }
    }
}